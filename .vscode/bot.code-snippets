{
  // Place your bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Class event": {
    "body": [
      "import { Client, Event } from '../structures';",
      "",
      "export default class extends Event {",
      "  constructor(client: Client) {",
      "    super(client, {",
      "      name: '${1:name}',",
      "    });",
      "  }",
      "",
      "  async execute($2) {",
      "    $0",
      "  }",
      "}"
    ],
    "description": "class to event snippet",
    "prefix": "class event",
    "scope": "javascript,typescript"
  },
  "Class message command": {
    "body": [
      "import { Message } from 'whatsapp-web.js';",
      "import { Client, Command } from '../../structures';",
      "",
      "export default class extends Command {",
      "  constructor(client: Client) {",
      "    super(client, {",
      "      name: '${1:name}',",
      "      description: '${2:description}',",
      "    });",
      "  }",
      "",
      "  async execute(message: Message) {",
      "    $0",
      "  }",
      "}"
    ],
    "description": "class to message command snippet",
    "prefix": "class message command",
    "scope": "javascript,typescript"
  }
}
